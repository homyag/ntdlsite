from django.core.management.base import BaseCommand
from django.db import transaction
from django.db.models import Q
import re

from good.models import Tag, Product
from good.tag_data import CONCRETE_TAGS, TAG_PRODUCT_MAPPING


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ–≥–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ç–Ω–æ–≥–æ –±–µ—Ç–æ–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏—Ö —Ç–æ–≤–∞—Ä–∞–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--assign-to-products',
            action='store_true',
            help='–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ–≥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤',
        )

    def handle(self, *args, **options):
        created_tags = 0
        updated_tags = 0
        assigned_products = 0

        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏
            for tag_data in CONCRETE_TAGS:
                tag, created = Tag.objects.get_or_create(
                    slug=tag_data['slug'],
                    defaults=tag_data
                )

                if created:
                    created_tags += 1
                    self.stdout.write(
                        self.style.SUCCESS(f'–°–æ–∑–¥–∞–Ω —Ç–µ–≥: {tag.name}')
                    )
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥
                    for field, value in tag_data.items():
                        if field != 'slug':  # slug –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
                            setattr(tag, field, value)
                    tag.save()
                    updated_tags += 1
                    self.stdout.write(
                        self.style.WARNING(f'–û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: {tag.name}')
                    )

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–≥–∏ —Ç–æ–≤–∞—Ä–∞–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
            if options['assign_to_products']:
                self.stdout.write('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Ç–æ–≤–∞—Ä–∞–º...')

                for tag_slug, grade_patterns in TAG_PRODUCT_MAPPING.items():
                    try:
                        tag = Tag.objects.get(slug=tag_slug)
                        self.stdout.write(f'\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–∞: {tag.name}')

                        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ä–∫–∞–º –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–≥–∞
                        for grade_pattern in grade_patterns:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
                            products = Product.objects.filter(
                                Q(name__iregex=rf'\b{re.escape(grade_pattern)}\b') & (
                                        Q(name__icontains='–±–µ—Ç–æ–Ω') |
                                        Q(name__icontains='–ë–µ—Ç–æ–Ω') |
                                        Q(name__icontains='–ë–ï–¢–û–ù') |
                                        Q(category__name__icontains='–±–µ—Ç–æ–Ω')  # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                                )
                            )

                            if options['dry_run']:
                                # –†–µ–∂–∏–º dry-run - —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
                                for product in products:
                                    if not product.tags.filter(id=tag.id).exists():
                                        self.stdout.write(
                                            f'  [DRY-RUN] –¢–µ–≥ "{tag.name}" –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–≤–∞—Ä—É "{product.name}"'
                                        )
                                        assigned_products += 1
                            else:
                                # –†–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
                                for product in products:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç —ç—Ç–æ–≥–æ —Ç–µ–≥–∞
                                    if not product.tags.filter(id=tag.id).exists():
                                        product.tags.add(tag)
                                        assigned_products += 1
                                        self.stdout.write(
                                            f'  ‚úì –¢–µ–≥ "{tag.name}" –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–≤–∞—Ä—É "{product.name}"'
                                        )

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
                        if not options['dry_run']:
                            tag_products_count = Product.objects.filter(tags=tag).count()
                            if tag_products_count == 0:
                                self.stdout.write(
                                    self.style.WARNING(
                                        f'‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è —Ç–µ–≥–∞ "{tag.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤'
                                    )
                                )
                            else:
                                self.stdout.write(
                                    self.style.SUCCESS(
                                        f'‚úì –¢–µ–≥ "{tag.name}" –Ω–∞–∑–Ω–∞—á–µ–Ω {tag_products_count} —Ç–æ–≤–∞—Ä–∞–º'
                                    )
                                )

                    except Tag.DoesNotExist:
                        self.stdout.write(
                            self.style.ERROR(f'‚ùå –¢–µ–≥ —Å slug "{tag_slug}" –Ω–µ –Ω–∞–π–¥–µ–Ω')
                        )

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write(self.style.SUCCESS(f'üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:'))
        self.stdout.write(f'  –°–æ–∑–¥–∞–Ω–æ —Ç–µ–≥–æ–≤: {created_tags}')
        self.stdout.write(f'  –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–≥–æ–≤: {updated_tags}')

        if options['assign_to_products']:
            action_text = "–ë—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if options['dry_run'] else "–ù–∞–∑–Ω–∞—á–µ–Ω–æ"
            self.stdout.write(f'  {action_text} —Ç–µ–≥–æ–≤ —Ç–æ–≤–∞—Ä–∞–º: {assigned_products}')

        self.stdout.write('=' * 60)

        if not options['assign_to_products']:
            self.stdout.write(
                self.style.NOTICE(
                    '\nüí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ —Ç–æ–≤–∞—Ä–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Ñ–ª–∞–≥–æ–º --assign-to-products'
                )
            )
            self.stdout.write(
                self.style.NOTICE(
                    'üí° –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --dry-run'
                )
            )
        elif options['dry_run']:
            self.stdout.write(
                self.style.NOTICE(
                    '\nüí° –≠—Ç–æ –±—ã–ª —Ä–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –£–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥ --dry-run –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤.'
                )
            )